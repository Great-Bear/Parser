// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parser.Model;

#nullable disable

namespace Parser.Migrations
{
    [DbContext(typeof(CarCatContext))]
    [Migration("20221227174548_Remade View")]
    partial class RemadeView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Parser.Model.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.ATM_MTM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("ATM_MTMs");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.BuildingContition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("BuildingContitions");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Cab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("Cabs");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.FuelInduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("FuelInductions");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.GearShiftType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("GearShiftTypes");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.LoadingCapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("LoadingCapacities");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.RearTire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("RearTires");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.TransmissionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.ToTable("TransmissionModels");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration_Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ATM_MTMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BodyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuildingContitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FuelInductionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GearShiftTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LoadingCapacityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RearTireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransmissionModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ATM_MTMId");

                    b.HasIndex("BodyId");

                    b.HasIndex("BuildingContitionId");

                    b.HasIndex("CabId");

                    b.HasIndex("CarId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("FuelInductionId");

                    b.HasIndex("GearShiftTypeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("LoadingCapacityId");

                    b.HasIndex("RearTireId");

                    b.HasIndex("TransmissionModelId");

                    b.ToTable("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.ViewModels.CarPresent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ATM_MTM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingContitions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelInduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearShiftType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearTire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionModel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("TakeData", (string)null);
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration_Car", b =>
                {
                    b.HasOne("Parser.Model.Models.Configuration.ATM_MTM", "ATM_MTM")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("ATM_MTMId");

                    b.HasOne("Parser.Model.Models.Configuration.Body", "Body")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("BodyId");

                    b.HasOne("Parser.Model.Models.Configuration.BuildingContition", "BuildingContition")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("BuildingContitionId");

                    b.HasOne("Parser.Model.Models.Configuration.Cab", "Cab")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("CabId");

                    b.HasOne("Parser.Model.Models.Car", "Car")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("CarId");

                    b.HasOne("Parser.Model.Models.Configuration.Destination", "Destination")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("DestinationId");

                    b.HasOne("Parser.Model.Models.Configuration.FuelInduction", "FuelInduction")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("FuelInductionId");

                    b.HasOne("Parser.Model.Models.Configuration.GearShiftType", "GearShiftType")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("GearShiftTypeId");

                    b.HasOne("Parser.Model.Models.Configuration.Grade", "Grade")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("GradeId");

                    b.HasOne("Parser.Model.Models.Configuration.LoadingCapacity", "LoadingCapacity")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("LoadingCapacityId");

                    b.HasOne("Parser.Model.Models.Configuration.RearTire", "RearTire")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("RearTireId");

                    b.HasOne("Parser.Model.Models.Configuration.TransmissionModel", "TransmissionModel")
                        .WithMany("Configuration_Cars")
                        .HasForeignKey("TransmissionModelId");

                    b.Navigation("ATM_MTM");

                    b.Navigation("Body");

                    b.Navigation("BuildingContition");

                    b.Navigation("Cab");

                    b.Navigation("Car");

                    b.Navigation("Destination");

                    b.Navigation("FuelInduction");

                    b.Navigation("GearShiftType");

                    b.Navigation("Grade");

                    b.Navigation("LoadingCapacity");

                    b.Navigation("RearTire");

                    b.Navigation("TransmissionModel");
                });

            modelBuilder.Entity("Parser.Model.Models.Car", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.ATM_MTM", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Body", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.BuildingContition", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Cab", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Destination", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.FuelInduction", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.GearShiftType", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.Grade", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.LoadingCapacity", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.RearTire", b =>
                {
                    b.Navigation("Configuration_Cars");
                });

            modelBuilder.Entity("Parser.Model.Models.Configuration.TransmissionModel", b =>
                {
                    b.Navigation("Configuration_Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
